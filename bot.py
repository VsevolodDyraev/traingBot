import logging
import shutil
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaVideo
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
import config
import os
from datetime import datetime
from moviepy import VideoFileClip
from pytubefix import YouTube
import instaloader
import re


# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10 –ú–ë –≤ –±–∞–π—Ç–∞—Ö)
MAX_FILE_SIZE = 10 * 1024 * 1024

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_folders = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
temp_videos = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOLDER_NAME = 1
WAITING_FILENAME = 2
WAITING_TRIM_START = 3
WAITING_TRIM_END = 4
WAITING_URL = 5

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/list - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ
/folders - –î–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ
/create_folder - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–∞–ø–∫–∏ —Å—Ä–∞–∑—É –∏–ª–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
/delete_folder - –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –∏ –≤—Å–µ –≤–∏–¥–µ–æ –≤ –Ω–µ–π
/delete_video - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏
/clear - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
/download_from_url - –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –∏–ª–∏ Instagram

–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë.
    """
    await update.message.reply_text(help_text)

async def create_folder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Create a new folder in resources directory."""
    logger.info("Command /create_folder received")
    try:
        if context.args:
            # –ï—Å–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å—Ä–∞–∑—É —Å –∫–æ–º–∞–Ω–¥–æ–π
            folder_name = context.args[0]
            logger.info(f"Creating folder with name: {folder_name}")
            folder_path = os.path.join(config.RESOURCES_DIR, folder_name)
            os.makedirs(folder_path, exist_ok=True)
            await update.message.reply_text(f"–ü–∞–ø–∫–∞ '{folder_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            # –ï—Å–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
            logger.info("Requesting folder name from user")
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏.\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
            context.user_data['waiting_for_folder_name'] = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages."""
    if context.user_data.get('waiting_for_folder_name'):
        try:
            folder_name = update.message.text
            logger.info(f"Creating folder with name: {folder_name}")
            folder_path = os.path.join(config.RESOURCES_DIR, folder_name)
            os.makedirs(folder_path, exist_ok=True)
            await update.message.reply_text(f"–ü–∞–ø–∫–∞ '{folder_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            context.user_data['waiting_for_folder_name'] = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏.")
            context.user_data['waiting_for_folder_name'] = False
    
    elif context.user_data.get('waiting_for_file_name'):
        try:
            file_name = update.message.text+".mp4"
            await save_video(update, context, file_name)
            context.user_data['waiting_for_file_name'] = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
            context.user_data['waiting_for_file_name'] = False
    
    elif context.user_data.get('waiting_for_trim_start'):
        try:
            start_time = float(update.message.text)
            duration = context.user_data.get('video_duration', 0)
            
            if start_time < 0 or start_time >= duration:
                await update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç 0 –¥–æ {int(duration)} —Å–µ–∫—É–Ω–¥."
                )
                return
            
            context.user_data['trim_start'] = start_time
            context.user_data['waiting_for_trim_start'] = False
            context.user_data['waiting_for_trim_end'] = True
            
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–µ–∑–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –æ—Ç {int(start_time)} –¥–æ {int(duration)}):"
            )
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    elif context.user_data.get('waiting_for_trim_end'):
        try:
            end_time = float(update.message.text)
            start_time = context.user_data.get('trim_start', 0)
            duration = context.user_data.get('video_duration', 0)
            
            if end_time <= start_time or end_time > duration:
                await update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç {int(start_time)} –¥–æ {int(duration)} —Å–µ–∫—É–Ω–¥."
                )
                return
            
            # –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            user_id = update.effective_user.id
            if user_id in temp_videos:
                video_path = temp_videos[user_id]['path']
                try:
                    clip = (
                        VideoFileClip(video_path)
                        .subclipped(start_time, end_time)
                    )
                    temp_path = video_path.replace('.mp4', '_trimmed.mp4')
                    clip.write_videofile(temp_path)
                    clip.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
                    temp_videos[user_id]['path'] = temp_path
                    os.remove(video_path)  # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
                    await show_folder_selection(update, context)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
                    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –≤–∏–¥–µ–æ.")
            
            context.user_data['waiting_for_trim_end'] = False
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    elif context.user_data.get('waiting_for_url'):
        try:
            await handle_url(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
            context.user_data['waiting_for_url'] = False
        

async def list_folders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available folders."""
    try:
        folders = [f for f in os.listdir(config.RESOURCES_DIR) 
                  if os.path.isdir(os.path.join(config.RESOURCES_DIR, f))]
        
        if not folders:
            message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫."
            if update.callback_query:
                await update.callback_query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
            return

        keyboard = []
        for folder in folders:
            # –ü–æ–¥—Å—á–µ—Ç –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ
            videos = [f for f in os.listdir(os.path.join(config.RESOURCES_DIR, folder)) 
                     if f.endswith(('.mp4', '.avi', '.mov'))]
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÅ {folder} ({len(videos)} –≤–∏–¥–µ–æ)", 
                    callback_data=f"view_{folder}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {e}")
        message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫."
        if update.callback_query:
            await update.callback_query.edit_message_text(message)
        else:
            await update.message.reply_text(message)

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle incoming video files."""
    try:
        video = update.message.video
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if video.file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(video.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        temp_filename = f"temp_{timestamp}.mp4"
        temp_path = os.path.join(config.RESOURCES_DIR, temp_filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        await file.download_to_drive(temp_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        temp_videos[user_id] = {
            'path': temp_path,
            'size': video.file_size,
            'timestamp': timestamp
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        keyboard = [
            [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data="upload_full")],
            [InlineKeyboardButton("‚úÇÔ∏è –û–±—Ä–µ–∑–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="upload_trim")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.")

async def show_folder_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show folder selection keyboard for video saving."""
    try:
        folders = [f for f in os.listdir(config.RESOURCES_DIR) 
                  if os.path.isdir(os.path.join(config.RESOURCES_DIR, f))]
        
        if not folders:
            message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∫–æ–º–∞–Ω–¥–æ–π /create_folder"
            if update.callback_query:
                await update.callback_query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
            return

        keyboard = []
        for folder in folders:
            keyboard.append([InlineKeyboardButton(folder, callback_data=f"save_{folder}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏: {e}")
        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏."
        if update.callback_query:
            await update.callback_query.edit_message_text(error_message)
        else:
            await update.message.reply_text(error_message)

async def show_filename_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, folder_name: str):
    """Show filename selection keyboard."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_videos[user_id]['selected_folder'] = folder_name
    
    keyboard = [
        [InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è", callback_data="random_name")],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∏–º—è", callback_data="custom_name")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:",
        reply_markup=reply_markup
    )

async def handle_filename_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle custom filename input."""
    user_id = update.effective_user.id
    filename = update.message.text
    
    if not filename.endswith('.mp4'):
        filename += '.mp4'
    
    await save_video(update, context, filename)
    return ConversationHandler.END

async def save_video(update: Update, context: ContextTypes.DEFAULT_TYPE, filename: str = None):
    """Save video to selected folder with given filename."""
    user_id = update.effective_user.id
    
    if user_id not in temp_videos:
        if update.callback_query:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞.")
        return
    
    temp_video = temp_videos[user_id]
    folder_name = temp_video['selected_folder']
    
    # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
    if not filename:
        filename = f"video_{temp_video['timestamp']}.mp4"
    
    final_path = os.path.join(config.RESOURCES_DIR, folder_name, filename)
    
    try:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        os.rename(temp_video['path'], final_path)
        
        message = (
            f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫—É '{folder_name}'!\n"
            f"–ò–º—è —Ñ–∞–π–ª–∞: {filename}\n"
            f"–†–∞–∑–º–µ—Ä: {round(temp_video['size'] / (1024 * 1024), 2)} –ú–ë"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        del temp_videos[user_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ."
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_message)
        else:
            await update.message.reply_text(error_message)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(temp_video['path']):
            os.remove(temp_video['path'])
        del temp_videos[user_id]

async def delete_folder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show folder deletion keyboard."""
    try:
        folders = [f for f in os.listdir(config.RESOURCES_DIR) 
                  if os.path.isdir(os.path.join(config.RESOURCES_DIR, f))]
        
        if not folders:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        keyboard = []
        for folder in folders:
            # –ü–æ–¥—Å—á–µ—Ç –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ
            videos = [f for f in os.listdir(os.path.join(config.RESOURCES_DIR, folder)) 
                     if f.endswith(('.mp4', '.avi', '.mov'))]
            keyboard.append([
                InlineKeyboardButton(
                    f"üóë {folder} ({len(videos)} –≤–∏–¥–µ–æ)", 
                    callback_data=f"delete_{folder}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–µ–æ):",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫.")

async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show confirmation for chat clearing."""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_confirm"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="clear_cancel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –æ—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=reply_markup
    )

async def delete_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show folder selection for video deletion."""
    try:
        folders = [f for f in os.listdir(config.RESOURCES_DIR) 
                  if os.path.isdir(os.path.join(config.RESOURCES_DIR, f))]
        
        if not folders:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ.")
            return

        keyboard = []
        for folder in folders:
            # –ü–æ–¥—Å—á–µ—Ç –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ
            videos = [f for f in os.listdir(os.path.join(config.RESOURCES_DIR, folder)) 
                     if f.endswith(('.mp4', '.avi', '.mov'))]
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÅ {folder} ({len(videos)} –≤–∏–¥–µ–æ)", 
                    callback_data=f"select_delete_folder_{folder}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_video")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫.")

async def folder_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle folder selection callback."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "upload_full":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        await show_folder_selection(update, context)
    elif callback_data == "upload_trim":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–µ–∑–∫–∏
        user_id = update.effective_user.id
        if user_id in temp_videos:
            video_path = temp_videos[user_id]['path']
            try:
                with VideoFileClip(video_path) as clip:
                    duration = clip.duration
                    await query.edit_message_text(
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {int(duration)} —Å–µ–∫—É–Ω–¥\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–µ–∑–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –æ—Ç 0 –¥–æ {int(duration)}):"
                    )
                    context.user_data['video_duration'] = duration
                    context.user_data['waiting_for_trim_start'] = True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
                await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")
    elif callback_data == "clear_confirm":
        # –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
            chat_id = query.message.chat_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
            status_message = await query.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞...")
            
            deleted_count = 0
            message_id = query.message.message_id
            count_errors = 0
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ
            while message_id > 0 and count_errors < 10:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.delete_message(
                        chat_id=chat_id,
                        message_id=message_id
                    )
                    deleted_count += 1
                    count_errors = 0
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if deleted_count % 5 == 0:
                        await status_message.edit_text(
                            f"üîÑ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}..."
                        )
                    
                    # –£–º–µ–Ω—å—à–∞–µ–º ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_id -= 1
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    await asyncio.sleep(0.01)
                    
                except Exception as e:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    message_id -= 1
                    count_errors += 1
                    continue
                
                # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ –±–æ–ª–µ–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if deleted_count >= 100:
                    break
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.edit_text(
                f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!\n–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")
            await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞.")
    elif callback_data == "clear_cancel":
        await query.edit_message_text("‚ùå –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif callback_data == "cancel_delete_video":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif callback_data.startswith("select_delete_folder_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        folder_name = callback_data.replace("select_delete_folder_", "")
        folder_path = os.path.join(config.RESOURCES_DIR, folder_name)
        
        try:
            videos = [f for f in os.listdir(folder_path) 
                     if f.endswith(('.mp4', '.avi', '.mov'))]
            
            if not videos:
                await query.edit_message_text(f"‚ùå –í –ø–∞–ø–∫–µ '{folder_name}' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            keyboard = []
            for video in videos:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóë {video}", 
                        callback_data=f"delete_video;{folder_name};{video}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="finish_delete_video"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–∞–º", callback_data="back_to_folders_delete")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ '{folder_name}':",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ: {e}")
            await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ.")
    elif callback_data.startswith("delete_video"):
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
        _, folder_name, video_name = callback_data.split(";", 2)
        video_path = os.path.join(config.RESOURCES_DIR, folder_name, video_name)
        
        try:
            logger.info(f"Attempting to delete video at path: {video_path}")
            if os.path.exists(video_path):
                os.remove(video_path)
                await query.answer(f"‚úÖ –í–∏–¥–µ–æ '{video_name}' —É–¥–∞–ª–µ–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
                videos = [f for f in os.listdir(os.path.join(config.RESOURCES_DIR, folder_name)) 
                         if f.endswith(('.mp4', '.avi', '.mov'))]
                
                if not videos:
                    await query.edit_message_text(f"‚úÖ –í—Å–µ –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ '{folder_name}' —É–¥–∞–ª–µ–Ω—ã.")
                    return
                
                keyboard = []
                for video in videos:
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üóë {video}", 
                            callback_data=f"delete_video;{folder_name};{video}"
                        )
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="finish_delete_video"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–∞–º", callback_data="back_to_folders_delete")
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ '{folder_name}':",
                    reply_markup=reply_markup
                )
            else:
                logger.error(f"Video file not found at path: {video_path}")
                await query.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")
    elif callback_data == "finish_delete_video":
        await query.edit_message_text("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    elif callback_data == "back_to_folders_delete":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ —Å–Ω–æ–≤–∞
        try:
            folders = [f for f in os.listdir(config.RESOURCES_DIR) 
                      if os.path.isdir(os.path.join(config.RESOURCES_DIR, f))]
            
            if not folders:
                await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ.")
                return

            keyboard = []
            for folder in folders:
                videos = [f for f in os.listdir(os.path.join(config.RESOURCES_DIR, folder)) 
                         if f.endswith(('.mp4', '.avi', '.mov'))]
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìÅ {folder} ({len(videos)} –≤–∏–¥–µ–æ)", 
                        callback_data=f"select_delete_folder_{folder}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_video")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {e}")
            await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫.")
    elif callback_data.startswith("save_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        folder_name = callback_data.replace("save_", "")
        await show_filename_selection(update, context, folder_name)
    elif callback_data == "random_name":
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
        await save_video(update, context)
    elif callback_data == "custom_name":
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è
        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .mp4):\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        context.user_data['waiting_for_file_name'] = True
        return WAITING_FILENAME
    elif callback_data.startswith("delete_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
        folder_name = callback_data.replace("delete_", "")
        folder_path = os.path.join(config.RESOURCES_DIR, folder_name)
        
        try:
            # –ü–æ–¥—Å—á–µ—Ç –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            videos = [f for f in os.listdir(folder_path) 
                     if f.endswith(('.mp4', '.avi', '.mov'))]
            
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            shutil.rmtree(folder_path)
            
            await query.edit_message_text(
                f"–ü–∞–ø–∫–∞ '{folder_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n"
                f"–£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {len(videos)}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
            await query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏."
            )
    elif callback_data.startswith("view_"):
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ
        folder_name = callback_data.replace("view_", "")
        folder_path = os.path.join(config.RESOURCES_DIR, folder_name)
        
        try:
            videos = [f for f in os.listdir(folder_path) 
                     if f.endswith(('.mp4', '.avi', '.mov'))]
            
            if not videos:
                await query.edit_message_text(f"–í –ø–∞–ø–∫–µ '{folder_name}' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∏–¥–µ–æ
            keyboard = []
            for video in videos:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üé• {video}", 
                        callback_data=f"play_{folder_name}_{video}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ", callback_data=f"send_all_{folder_name}"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–∞–º", callback_data="back_to_folders")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–í–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ '{folder_name}':",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ: {e}")
            await query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ."
            )
    elif callback_data.startswith("play_"):
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        _, folder_name, video_name = callback_data.split("_", 2)
        video_path = os.path.join(config.RESOURCES_DIR, folder_name, video_name)
        
        try:
            with open(video_path, 'rb') as video_file:
                await query.message.reply_video(
                    video=video_file,
                    caption=f"üé• {video_name}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ."
            )
    elif callback_data.startswith("send_all_"):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏
        folder_name = callback_data.replace("send_all_", "")
        folder_path = os.path.join(config.RESOURCES_DIR, folder_name)
        
        try:
            videos = [f for f in os.listdir(folder_path) 
                     if f.endswith(('.mp4', '.avi', '.mov'))]
            
            if not videos:
                await query.edit_message_text(f"–í –ø–∞–ø–∫–µ '{folder_name}' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            status_message = await query.message.reply_text(
                f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {len(videos)} –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ '{folder_name}'..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–º—É
            for i, video in enumerate(videos, 1):
                try:
                    video_path = os.path.join(folder_path, video)
                    with open(video_path, 'rb') as video_file:
                        await query.message.reply_video(
                            video=video_file,
                            caption=f"üé• {video} ({i}/{len(videos)})"
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    await status_message.edit_text(
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i} –∏–∑ {len(videos)} –≤–∏–¥–µ–æ..."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {video}: {e}")
                    await status_message.edit_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {video}. –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É..."
                    )
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.edit_text(
                f"‚úÖ –í—Å–µ –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ '{folder_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ: {e}")
            await query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ."
            )
    elif callback_data == "back_to_folders":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫
        await list_folders(update, context)

async def list_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all available video resources."""
    try:
        folders = [f for f in os.listdir(config.RESOURCES_DIR) 
                  if os.path.isdir(os.path.join(config.RESOURCES_DIR, f))]
        
        if not folders:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ —Å –≤–∏–¥–µ–æ.")
            return
        
        message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ –ø–∞–ø–∫–∞–º:\n\n"
        for folder in folders:
            folder_path = os.path.join(config.RESOURCES_DIR, folder)
            files = [f for f in os.listdir(folder_path) if f.endswith(('.mp4', '.avi', '.mov'))]
            
            if files:
                message += f"üìÅ {folder}:\n"
                for i, file in enumerate(files, 1):
                    file_size = os.path.getsize(os.path.join(folder_path, file))
                    size_mb = round(file_size / (1024 * 1024), 2)
                    message += f"  {i}. {file} ({size_mb} –ú–ë)\n"
                message += "\n"
        
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ.")

async def download_from_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /download_from_url command."""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube –∏–ª–∏ Instagram.\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    context.user_data['waiting_for_url'] = True
    return WAITING_URL

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL
        if not (url.startswith('http://') or url.startswith('https://')):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        status_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        temp_filename = f"temp_{timestamp}.mp4"
        temp_path = os.path.join(config.RESOURCES_DIR, temp_filename)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        if 'youtube.com' in url or 'youtu.be' in url:
            # YouTube
            await status_message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ —Å YouTube...")
            try:
                yt = YouTube(url)
                stream = None
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                try:
                    stream = yt.streams.get_highest_resolution()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ: {e}")
                    
                if stream == None:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª—é–±–æ–π MP4 –ø–æ—Ç–æ–∫
                    stream = yt.streams.filter(file_extension='mp4').first()
                if not stream:
                    await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ.")
                    return
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                await status_message.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
                downloaded_path = stream.download(output_path=config.RESOURCES_DIR, filename=temp_filename)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not os.path.exists(downloaded_path):
                    await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                temp_path = downloaded_path
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å YouTube: {e}")
                await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ —Å YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
                return
            
        elif 'instagram.com' in url:
            # Instagram
            await status_message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ —Å Instagram...")
            L = instaloader.Instaloader()
            post = instaloader.Post.from_shortcode(L.context, url.split('/')[-2])
            if not post.is_video:
                await status_message.edit_text("‚ùå –≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ.")
                return
            L.download_post(post, target=config.RESOURCES_DIR)
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            downloaded_file = [f for f in os.listdir(config.RESOURCES_DIR) if f.endswith('.mp4')][-1]
            os.rename(os.path.join(config.RESOURCES_DIR, downloaded_file), temp_path)
            
        else:
            await status_message.edit_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –∏ Instagram.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(temp_path)
        if file_size > MAX_FILE_SIZE:
            os.remove(temp_path)
            await status_message.edit_text("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        temp_videos[user_id] = {
            'path': temp_path,
            'size': file_size,
            'timestamp': timestamp
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        keyboard = [
            [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data="upload_full")],
            [InlineKeyboardButton("‚úÇÔ∏è –û–±—Ä–µ–∑–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="upload_trim")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await status_message.edit_text(
            "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:",
            reply_markup=reply_markup
        )
        
        context.user_data['waiting_for_url'] = False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data['waiting_for_url'] = False

def main():
    """Start the bot."""
    # Create the Application with increased connection pool size and timeout
    application = (
        Application.builder()
        .token(config.BOT_TOKEN)
        .connection_pool_size(16)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        .connect_timeout(30.0)     # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        .read_timeout(30.0)        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
        .write_timeout(30.0)       # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
        .pool_timeout(30.0)        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—É–ª–∞
        .build()
    )

    # Add command handlers first
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list", list_resources))
    application.add_handler(CommandHandler("folders", list_folders))
    application.add_handler(CommandHandler("create_folder", create_folder))
    application.add_handler(CommandHandler("delete_folder", delete_folder))
    application.add_handler(CommandHandler("delete_video", delete_video))
    application.add_handler(CommandHandler("clear", clear_chat))
    application.add_handler(CommandHandler("download_from_url", download_from_url))
    
    # Add video handler
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    
    # Add text handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # Add callback handler for folder selection
    application.add_handler(CallbackQueryHandler(folder_callback, pattern="^(save_|random_name|delete_|view_|play_|send_all_|back_to_folders|clear_confirm|clear_cancel|select_delete_folder_|delete_video_|cancel_delete_video|finish_delete_video|back_to_folders_delete|custom_name|upload_full|upload_trim)"))

    # Start the Bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 